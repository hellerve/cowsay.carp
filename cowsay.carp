(relative-include "support.h")
(register read-all-stdin (Fn [] String))

(def cow (String.join "\n" &[
    @"        \\   ^__^"
    @"         \\  (oo)\\_______"
    @"            (__)\\       )\\/\\"
    @"                ||----w |"
    @"                ||     ||"
  ]
))

(def LEN 47)

(defn arg-str []
  (let [ln (System.get-args-len)
        s @""]
    (if (> ln 1)
      (do
        (for [i 1 ln]
          (set! s (String.join " " &[s @(System.get-arg i)])))
        (String.trim &s))
      (read-all-stdin))))

(defn partition [s]
  (let-do [res []]
    (while (> (length &s) 0)
      (let [mln (Int.min (length &s) LEN)]
        (let-do [pref (prefix &s mln)
                 space-idx (Pattern.find #"\s[^\s]+$" &pref)
                 tln (if (> space-idx -1) (Int.min mln (Int.inc space-idx)) mln)
                 newline-idx (String.index-of &pref \newline)
                 ln (if (> newline-idx -1) (Int.min tln (Int.inc newline-idx)) tln)]
          (Array.push-back! &res (trim &(prefix &pref ln)))
          (set! s (suffix &s ln)))))
    res)
)

(defn bubblify [s]
  (if (< (length &s) LEN)
    (String.join "" &[
      @" < "
      s
      @" >"
    ])
    (let [spl (partition s)
          ln (Int.dec (Array.length &spl))]
      (String.join "\n"
        &(Array.zip
          &(fn [x i]
            (case @i
              0  (fmt " / %-47s \\" x)
              ln (fmt " \\ %-47s /" x)
                 (fmt " | %-47s |" x)))
          &spl
          &(Array.range 0 ln 1))))))

(defn cowsayify [s]
  (let [sep-up (String.repeat (Int.min (+ (length &s) 2) (+ LEN 2)) "_")
        sep-down (String.repeat (Int.min (+ (length &s) 2) (+ LEN 2)) "-")]
    (String.join "" &[
      @"  "
      sep-up
      @"\n"
      (bubblify s)
      @"\n  "
      @&sep-down
      @"\n"
      @&cow
    ])))

(defn main []
  (let [s (arg-str)]
    (IO.println &(cowsayify s))))
